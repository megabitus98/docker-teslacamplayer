@using System
@using MudBlazor
@using TeslaCamPlayer.BlazorHosted.Shared.Models
@using TeslaCamPlayer.BlazorHosted.Client.Helpers
@using TeslaCamPlayer.BlazorHosted.Client.Services
@implements IAsyncDisposable

<MudDialog Class="pa-2" MaxWidth="MaxWidth.Small" FullWidth="true">
    <DialogContent>
        <div class="mt-2">
            @if (_status == null || _status.State == ExportState.Pending)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                <MudText Typo="Typo.caption" Class="mt-1">Preparing export…</MudText>
            }
            else if (_status.State == ExportState.Running)
            {
                <MudProgressLinear Color="Color.Primary" Value="@_status.Percent" />
                <MudText Typo="Typo.caption" Class="mt-1">@(_status.Percent.ToString("0.0"))%</MudText>
            }
            else if (_status.State == ExportState.Completed)
            {
                <MudAlert Severity="Severity.Success" Class="mb-2">Export completed successfully.</MudAlert>
            }
            else if (_status.State == ExportState.Failed)
            {
                <MudAlert Severity="Severity.Error">@(_status.ErrorMessage ?? "Export failed.")</MudAlert>
            }
            else if (_status.State == ExportState.Canceled)
            {
                <MudAlert Severity="Severity.Warning">Export was canceled.</MudAlert>
            }
        </div>
    </DialogContent>
    <DialogActions>
        @if (_status?.State == ExportState.Completed && !string.IsNullOrWhiteSpace(_status?.OutputUrl))
        {
            <MudButton Color="Color.Success" Href="@_status.OutputUrl" Target="_blank">Download</MudButton>
        }
        @if ((_status == null || _status.State == ExportState.Pending || _status.State == ExportState.Running) && !_isCancelling)
        {
            <MudButton Color="Color.Error" Variant="Variant.Outlined" OnClick="@CancelExport">Cancel Export</MudButton>
        }
        @if (_isCancelling)
        {
            <MudButton Disabled="true" Variant="Variant.Outlined">Cancelling…</MudButton>
        }
        <MudButton Variant="Variant.Text" OnClick="@Close">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public string JobId { get; set; }

    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private StatusHubClient StatusHubClient { get; set; }

    private ExportStatus _status;
    private bool _isCancelling;
    private IDisposable _subscription;
    private bool _subscribedToJob;

    protected override async Task OnInitializedAsync()
    {
        _subscription = StatusHubClient.RegisterExportHandler(HandleExportStatusAsync);
        await StatusHubClient.EnsureConnectedAsync();

        if (!string.IsNullOrWhiteSpace(JobId))
        {
            await StatusHubClient.SubscribeToExportAsync(JobId);
            _subscribedToJob = true;
            _status = new ExportStatus { JobId = JobId, State = ExportState.Pending };
        }
    }

    private async Task HandleExportStatusAsync(ExportStatus status)
    {
        if (status == null || !string.Equals(status.JobId, JobId, StringComparison.OrdinalIgnoreCase))
            return;

        _status = status;

        if (status.State is ExportState.Completed or ExportState.Failed or ExportState.Canceled)
        {
            _isCancelling = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task CancelExport()
    {
        if (string.IsNullOrWhiteSpace(JobId) || _isCancelling)
            return;

        _isCancelling = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            await HttpClient.PostAsync($"Api/CancelExport?jobId={Uri.EscapeDataString(JobId)}", new StringContent(string.Empty));
        }
        catch
        {
            // Ignore cancellation errors; hub updates will surface issues
        }
    }

    void Close()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    public async ValueTask DisposeAsync()
    {
        _subscription?.Dispose();

        if (_subscribedToJob && !string.IsNullOrWhiteSpace(JobId))
        {
            try
            {
                await StatusHubClient.UnsubscribeFromExportAsync(JobId);
            }
            catch
            {
                // Ignore cleanup errors
            }
        }
    }
}
