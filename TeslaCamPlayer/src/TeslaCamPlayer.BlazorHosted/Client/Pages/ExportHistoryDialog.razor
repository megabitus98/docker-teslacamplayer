@using System
@using System.Linq
@using System.Threading
@using MudBlazor
@using TeslaCamPlayer.BlazorHosted.Client.Services
@using TeslaCamPlayer.BlazorHosted.Shared.Models
@implements IAsyncDisposable

<MudDialog Class="pa-2" MaxWidth="MaxWidth.Large" FullWidth="true">
    <DialogContent>
        <div class="mt-2">
            <MudTable Items="_items" Dense="true" Hover="true">
                <HeaderContent>
                    <MudTh>File</MudTh>
                    <MudTh>Created (UTC)</MudTh>
                    <MudTh>Size</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Progress</MudTh>
                    <MudTh>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="File">@context.FileName</MudTd>
                    <MudTd DataLabel="Created">@context.CreatedUtc.ToString("yyyy-MM-dd HH:mm:ss")</MudTd>
                    <MudTd DataLabel="Size">@FormatSize(context.SizeBytes)</MudTd>
                    <MudTd DataLabel="Status">@context.Status?.State.ToString()</MudTd>
                    <MudTd DataLabel="Progress">
                        @if (context.Status?.State == ExportState.Running || context.Status?.State == ExportState.Pending)
                        {
                            <MudProgressLinear Value="@(context.Status?.Percent ?? 0)" />
                        }
                    </MudTd>
                    <MudTd DataLabel="Action">
                        @if (context.Status?.State == ExportState.Completed && !string.IsNullOrWhiteSpace(context.Url))
                        {
                            <MudButton Size="Size.Small" Color="Color.Success" Href="@context.Url" Target="_blank">Download</MudButton>
                        }
                        @if ((context.Status?.State == ExportState.Running || context.Status?.State == ExportState.Pending) && !_canceling.Contains(context.JobId))
                        {
                            <MudButton Size="Size.Small" Color="Color.Error" Variant="Variant.Outlined" OnClick="@(() => Cancel(context.JobId))">Cancel</MudButton>
                        }
                        @if (_canceling.Contains(context.JobId))
                        {
                            <MudButton Size="Size.Small" Disabled="true" Variant="Variant.Outlined">Cancellingâ€¦</MudButton>
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="@Close">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] HttpClient Http { get; set; }
    [Inject] StatusHubClient StatusHubClient { get; set; }

    public class ExportItemVm
    {
        public string FileName { get; set; }
        public string Url { get; set; }
        public long SizeBytes { get; set; }
        public DateTime CreatedUtc { get; set; }
        public string JobId { get; set; }
        public ExportStatus Status { get; set; }
    }

    private readonly SemaphoreSlim _loadSemaphore = new(1, 1);
    private readonly HashSet<string> _canceling = new();
    private readonly List<ExportItemVm> _items = new();
    private IDisposable _subscription;
    private bool _subscribedToAll;

    protected override async Task OnInitializedAsync()
    {
        _subscription = StatusHubClient.RegisterExportHandler(HandleExportStatusAsync);
        await StatusHubClient.EnsureConnectedAsync();
        await StatusHubClient.SubscribeToAllExportsAsync();
        _subscribedToAll = true;
        await LoadAsync();
    }

    private async Task HandleExportStatusAsync(ExportStatus status)
    {
        if (status == null)
            return;

        var existing = _items.FirstOrDefault(i => string.Equals(i.JobId, status.JobId, StringComparison.OrdinalIgnoreCase));
        if (existing != null)
        {
            existing.Status = status;
        }
        else
        {
            _items.Insert(0, new ExportItemVm
            {
                JobId = status.JobId,
                Status = status,
                FileName = status.JobId,
                CreatedUtc = DateTime.UtcNow
            });
        }

        if (status.State is ExportState.Completed or ExportState.Failed or ExportState.Canceled)
        {
            _canceling.Remove(status.JobId);
        }

        await InvokeAsync(StateHasChanged);

        if (status.State == ExportState.Completed)
        {
            await LoadAsync();
        }
    }

    private async Task LoadAsync()
    {
        if (!await _loadSemaphore.WaitAsync(0))
        {
            return;
        }

        try
        {
            var data = await Http.GetFromJsonAsync<List<ExportItemVm>>("Api/ListExports");
            await InvokeAsync(() =>
            {
                _items.Clear();
                if (data != null)
                {
                    _items.AddRange(data);
                }

                // Drop any 'canceling' flags for jobs no longer running
                _canceling.RemoveWhere(id => _items.All(x => x.JobId != id || (x.Status?.State != ExportState.Running && x.Status?.State != ExportState.Pending)));
                StateHasChanged();
            });
        }
        catch
        {
            // Ignore transient load errors; updates will retry
        }
        finally
        {
            _loadSemaphore.Release();
        }
    }

    private async Task Cancel(string jobId)
    {
        if (string.IsNullOrWhiteSpace(jobId) || _canceling.Contains(jobId))
            return;

        _canceling.Add(jobId);
        await InvokeAsync(StateHasChanged);

        try
        {
            await Http.PostAsync($"Api/CancelExport?jobId={Uri.EscapeDataString(jobId)}", new StringContent(string.Empty));
        }
        catch
        {
            // Ignore cancellation errors
        }
    }

    private static string FormatSize(long bytes)
    {
        string[] units = { "B", "KB", "MB", "GB" };
        double size = bytes;
        int unit = 0;
        while (size >= 1024 && unit < units.Length - 1)
        {
            size /= 1024;
            unit++;
        }
        return $"{size:0.##} {units[unit]}";
    }

    void Close()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    public async ValueTask DisposeAsync()
    {
        _subscription?.Dispose();

        if (_subscribedToAll)
        {
            try
            {
                await StatusHubClient.UnsubscribeFromAllExportsAsync();
            }
            catch
            {
                // Ignore cleanup errors
            }
        }

        _loadSemaphore.Dispose();
    }
}
