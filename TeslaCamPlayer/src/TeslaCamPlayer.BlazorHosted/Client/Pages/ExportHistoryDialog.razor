@using MudBlazor
@using TeslaCamPlayer.BlazorHosted.Shared.Models

<MudDialog Class="pa-2" MaxWidth="MaxWidth.Large" FullWidth="true">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-2">Export History</MudText>
        <MudTable Items="_items" Dense="true" Hover="true">
            <HeaderContent>
                <MudTh>File</MudTh>
                <MudTh>Created (UTC)</MudTh>
                <MudTh>Size</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Progress</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="File">@context.FileName</MudTd>
                <MudTd DataLabel="Created">@context.CreatedUtc.ToString("yyyy-MM-dd HH:mm:ss")</MudTd>
                <MudTd DataLabel="Size">@FormatSize(context.SizeBytes)</MudTd>
                <MudTd DataLabel="Status">@context.Status?.State.ToString()</MudTd>
                <MudTd DataLabel="Progress">
                    @if (context.Status?.State == ExportState.Running || context.Status?.State == ExportState.Pending)
                    {
                        <MudProgressLinear Value="@(context.Status?.Percent ?? 0)" />
                    }
                </MudTd>
                <MudTd DataLabel="Action">
                    @if (context.Status?.State == ExportState.Completed && !string.IsNullOrWhiteSpace(context.Url))
                    {
                        <MudButton Size="Size.Small" Color="Color.Success" Href="@context.Url" Target="_blank">Download</MudButton>
                    }
                    @if ((context.Status?.State == ExportState.Running || context.Status?.State == ExportState.Pending) && !_canceling.Contains(context.JobId))
                    {
                        <MudButton Size="Size.Small" Color="Color.Error" Variant="Variant.Outlined" OnClick="@(() => Cancel(context.JobId))">Cancel</MudButton>
                    }
                    @if (_canceling.Contains(context.JobId))
                    {
                        <MudButton Size="Size.Small" Disabled="true" Variant="Variant.Outlined">Cancellingâ€¦</MudButton>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="@Close">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] HttpClient Http { get; set; }

    public class ExportItemVm
    {
        public string FileName { get; set; }
        public string Url { get; set; }
        public long SizeBytes { get; set; }
        public DateTime CreatedUtc { get; set; }
        public string JobId { get; set; }
        public ExportStatus Status { get; set; }
    }

    private List<ExportItemVm> _items = new();
    private System.Timers.Timer _timer;
    private HashSet<string> _canceling = new();

    protected override async Task OnInitializedAsync()
    {
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += async (_, __) => await InvokeAsync(async () => await LoadAsync());
        _timer.Enabled = true;
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            var data = await Http.GetFromJsonAsync<List<ExportItemVm>>("Api/ListExports");
            _items = data ?? new List<ExportItemVm>();
            // Drop any 'canceling' flags for jobs no longer running
            _canceling.RemoveWhere(id => _items.All(x => x.JobId != id || (x.Status?.State != ExportState.Running && x.Status?.State != ExportState.Pending)));
            StateHasChanged();
        }
        catch { }
    }

    private async Task Cancel(string jobId)
    {
        if (string.IsNullOrWhiteSpace(jobId) || _canceling.Contains(jobId))
            return;

        _canceling.Add(jobId);
        try
        {
            await Http.PostAsync($"Api/CancelExport?jobId={Uri.EscapeDataString(jobId)}", new StringContent(string.Empty));
        }
        catch { }
    }

    private static string FormatSize(long bytes)
    {
        string[] units = { "B", "KB", "MB", "GB" };
        double size = bytes;
        int unit = 0;
        while (size >= 1024 && unit < units.Length - 1)
        {
            size /= 1024;
            unit++;
        }
        return $"{size:0.##} {units[unit]}";
    }

    void Close()
    {
        try { _timer?.Stop(); } catch { }
        try { _timer?.Dispose(); } catch { }
        MudDialog.Close(DialogResult.Ok(true));
    }
}
