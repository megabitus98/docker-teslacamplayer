@namespace TeslaCamPlayer.BlazorHosted.Client.Components
@using TeslaCamPlayer.BlazorHosted.Shared.Models

<div class="viewer">
    <div class="video-container">
        <!--
            Responsive auto-fit grid of camera tiles.
            When a tile enters fullscreen, apply class 'fullscreen-active' on the grid and 'is-fullscreen' on the active tile.
        -->
        <div class="video-grid @(IsFullscreen ? "fullscreen-active" : null)" style="@GridStyle()">
            @foreach (var tile in _tiles)
            {
                <div class="grid-tile @GetTileCss(tile.Tile) @(IsTileVisible(tile.Tile) ? null : "is-hidden")"
                     data-camera="@tile.DataCamera" data-visible="@(IsTileVisible(tile.Tile).ToString().ToLower())"
                     role="button" tabindex="0" aria-label="View @tile.Label fullscreen"
                     @onclick="@(() => ToggleFullscreen(tile.Tile))"
                     @onkeydown="@(e => TileKeyDown(e, tile.Tile))">
                    <VideoPlayer @key="@tile.VideoKey" @ref="tile.Player" Class="grid-video" VideoEnded="VideoEnded" TimeUpdate="ActiveVideoTimeUpdate" />
                    @if (IsTileVisible(tile.Tile))
                    {
                        <div class="tile-label"><span class="tile-label__text">@tile.Label</span></div>
                    }
                </div>
            }
        </div>

        @if (IsFullscreen)
        {
            <button class="fullscreen-close" aria-label="Close fullscreen" title="Close"
                    @onclick="ExitFullscreen">
                ✕
            </button>
        }
    </div>
    <div class="controls">
        @if (IsExportMode)
        {
            <MudAlert Severity="Severity.Info" Dense="true" Class="mb-2">Export Mode Active — select a time range below</MudAlert>
        }
        <div class="play-pause">
            <MudIconButton Icon="@Icons.Material.Filled.SkipPrevious" Size="Size.Large" OnClick="@PreviousButtonClicked" />
            <MudIconButton Icon="@Icons.Material.Filled.Replay10" Size="Size.Medium" OnClick="@SkipBackwardTenSeconds" />
            <MudIconButton Icon="@(_isPlaying ? Icons.Material.Filled.PauseCircleOutline : Icons.Material.Filled.PlayCircleOutline)" Size="Size.Large" OnClick="@PlayPauseClicked" />
            <MudIconButton Icon="@Icons.Material.Filled.Forward10" Size="Size.Medium" OnClick="@SkipForwardTenSeconds" />
            <MudIconButton Icon="@Icons.Material.Filled.SkipNext" Size="Size.Large" OnClick="@NextButtonClicked" />
            <MudTooltip Text="Jump to event marker">
                <MudIconButton Icon="@Icons.Material.Filled.RadioButtonChecked" Size="Size.Medium" OnClick="@JumpToEventMarker" />
            </MudTooltip>
        </div>
        <div class="seeker-slider-container">
            <div class="current-time-container">@GetCurrentScrubTime()</div>
            <div class="slider-container">
                <MudSlider T="double"
                           Max="@_timelineMaxSeconds"
                           Step="0.01"
                           Size="Size.Medium"
                           @bind-Value="@TimelineValue"
                           Variant="Variant.Filled"
                           @onpointerdown="@TimelineSliderPointerDown"
                           @onpointerup="@TimelineSliderPointerUp" />
                <div class="event-marker" style="@EventMarkerStyle()"></div>
                @foreach (var segment in _clip?.Segments ?? Array.Empty<ClipVideoSegment>())
                {
                    <div class="segment-marker" style="@SegmentStartMarkerStyle(segment)"></div>
                }
            </div>
            <div class="time-container">
                @_clip?.EndDate.ToString("hh:mm:ss tt")
            </div>
        </div>
        @if (IsExportMode)
        {
            <div class="export-range-edit d-flex flex-column mt-2" style="gap:6px; width: 100%; max-width: 1100px;">
                <div class="d-flex align-center" style="gap:8px;">
                    <MudText Typo="Typo.caption">Start: @ExportStartDisplay()</MudText>
                    <MudSlider T="double" Max="@_timelineMaxSeconds" Step="0.01" Size="Size.Small"
                               Value="@_exportRange.Start" ValueChanged="@OnExportStartChanged" Variant="Variant.Filled" />
                </div>
                <div class="d-flex align-center" style="gap:8px;">
                    <MudText Typo="Typo.caption">End: @ExportEndDisplay()</MudText>
                    <MudSlider T="double" Max="@_timelineMaxSeconds" Step="0.01" Size="Size.Small"
                               Value="@_exportRange.End" ValueChanged="@OnExportEndChanged" Variant="Variant.Filled" />
                </div>
                <div class="d-flex align-center" style="gap: 12px;">
                    <MudText Typo="Typo.body2">Selected: @ExportDurationDisplay()</MudText>
                </div>
            </div>
        }
    </div>
</div>
