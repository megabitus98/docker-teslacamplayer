# syntax=docker/dockerfile:1.7

######## builder: .NET (Debian/glibc) ########
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS dotnet-builder
ARG TESLACAMPLAYER_VERSION
ARG TARGETARCH
WORKDIR /src

# Restore with good caching
COPY TeslaCamPlayer/src/TeslaCamPlayer.BlazorHosted/Server/*.csproj TeslaCamPlayer/src/TeslaCamPlayer.BlazorHosted/Server/
COPY TeslaCamPlayer/src/TeslaCamPlayer.BlazorHosted/Client/*.csproj TeslaCamPlayer/src/TeslaCamPlayer.BlazorHosted/Client/
RUN --mount=type=cache,target=/root/.nuget/packages \
    dotnet restore TeslaCamPlayer/src/TeslaCamPlayer.BlazorHosted/Server

COPY TeslaCamPlayer/ TeslaCamPlayer/
WORKDIR /src/TeslaCamPlayer/src/TeslaCamPlayer.BlazorHosted/Server
RUN if [ -n "${TESLACAMPLAYER_VERSION}" ]; then \
      sed -i'' -e "s#<AssemblyVersion>[0-9.*]\\+</AssemblyVersion>#<AssemblyVersion>${TESLACAMPLAYER_VERSION}</AssemblyVersion>#g" TeslaCamPlayer.BlazorHosted.Server.csproj; \
    fi

# map docker TARGETARCH -> .NET RID arch token
ENV RID_PREFIX=linux
RUN if [ "$TARGETARCH" = "amd64" ]; then export RID=${RID_PREFIX}-x64; else export RID=${RID_PREFIX}-${TARGETARCH}; fi && \
    dotnet publish -c Release -o /tmp/publish \
    -r ${RID} --self-contained true \
    /p:EnableCompressionInSingleFile=true \
    /p:DebugType=none \
    /p:DefineConstants=DOCKER \
    ${TESLACAMPLAYER_VERSION:+/p:AssemblyVersion=${TESLACAMPLAYER_VERSION}}

######## builder: Node (Debian) ########
FROM node:20-bullseye-slim AS client-build
WORKDIR /src/TeslaCamPlayer/src/TeslaCamPlayer.BlazorHosted/Client

# deps
COPY TeslaCamPlayer/src/TeslaCamPlayer.BlazorHosted/Client/package*.json ./
RUN --mount=type=cache,target=/root/.npm npm ci

# source
COPY TeslaCamPlayer/src/TeslaCamPlayer.BlazorHosted/Client/ ./
RUN npx gulp default

# ---- APM CONFIG (build-time overridable) ----
ARG APM_SERVICE_NAME=teslacamplayer-client
ARG APM_SERVER_URL=http://localhost:8200
ARG APM_SERVICE_VERSION=dev
ARG APM_ENVIRONMENT=production
# Optional: comma-separated list of origins (e.g. https://api.example.com,https://other.example.com)
ARG APM_DTO=

# 1) write /wwwroot/apm-config.js (read by apm.ts at runtime)
RUN node -e "const fs=require('fs'); \
const dto=(process.env.APM_DTO||'').split(',').map(s=>s.trim()).filter(Boolean); \
const cfg={serviceName:process.env.APM_SERVICE_NAME,serverUrl:process.env.APM_SERVER_URL,serviceVersion:process.env.APM_SERVICE_VERSION,environment:process.env.APM_ENVIRONMENT}; \
if(dto.length) cfg.distributedTracingOrigins=dto; \
fs.writeFileSync('wwwroot/apm-config.js','window.__APM__='+JSON.stringify(cfg));"

# 2) bundle src/apm.ts -> wwwroot/js/apm.js
RUN npx --yes esbuild src/apm.ts --bundle --platform=browser --format=iife --outfile=wwwroot/js/apm.js

# (your existing css copyâ€”leave as-is)
RUN mkdir -p /client-static/ && cp -r wwwroot/ /client-static/

######## runtime: keep linuxserver base (Ubuntu noble arm64) ########
FROM ghcr.io/imagegenius/baseimage-ubuntu:arm64v8-noble

ARG TESLACAMPLAYER_VERSION
ARG BUILD_DATE
LABEL build_version="Version:- ${TESLACAMPLAYER_VERSION} Build-date:- ${BUILD_DATE}"
LABEL maintainer="megabitus98"

ENV ClipsRootPath=/media \
    CACHE_DATABASE_PATH=/config/clips.db \
    ASPNETCORE_URLS=http://+:5000 \
    TESLACAMPLAYER_VERSION=${TESLACAMPLAYER_VERSION} \
    BUILD_DATE=${BUILD_DATE} \
    DEBIAN_FRONTEND=noninteractive \
    DOTNET_EnableDiagnostics=0

# ffmpeg only, no recommends; clean in the same layer
RUN apt-get update && \
    apt-get install -y --no-install-recommends ffmpeg ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Copy published app + client css
COPY --from=dotnet-builder /tmp/publish/ /app/teslacamplayer/
COPY --from=client-build /client-static/ /app/teslacamplayer/

# Your existing s6 services (root/) still work
COPY root/ /

EXPOSE 5000
VOLUME ["/config", "/media"]
