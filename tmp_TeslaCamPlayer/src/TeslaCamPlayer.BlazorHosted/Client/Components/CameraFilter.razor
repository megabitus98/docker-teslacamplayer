@using TeslaCamPlayer.BlazorHosted.Client.Models

<MudTreeView Items="@_treeItems" Dense="true">
    <ItemTemplate>
        <MudTreeViewItem Expanded="true" Items="@context.TreeItems">
            <Content>
                <MudCheckBox T="bool?" Checked="@context.IsCheckedState()"
                             CheckedChanged="@(_ => context.CheckedChanged())">
                    <div class="d-flex align-center">
                        <MudIcon Icon="@context.Icon" Size="Size.Small" Class="mr-1" />
                        @context.Text
                    </div>
                </MudCheckBox>
            </Content>
        </MudTreeViewItem>
    </ItemTemplate>
</MudTreeView>

@code {
    private class TreeItemData
    {
        private readonly Action<bool> _isCheckedChangedHandler;

        public TreeItemData Parent { get; set; } = null;

        public string Text { get; }
        public string Icon { get; }

        public bool IsChecked { get; set; }

        public bool HasChild => TreeItems?.Any() == true;

        public HashSet<TreeItemData> TreeItems { get; set; } = new();

        public TreeItemData(string text, string icon, bool isChecked, Action<bool> isCheckedChangedHandler = null)
        {
            _isCheckedChangedHandler = isCheckedChangedHandler;
            Text = text;
            Icon = icon;
            IsChecked = isChecked;
        }

        public TreeItemData AddChild(string itemName, string icon, bool isChecked, Action<bool> isCheckedChangedHandler = null)
        {
            var item = new TreeItemData(itemName, icon, isChecked, isCheckedChangedHandler)
            {
                Parent = this
            };
            TreeItems.Add(item);

            return item;
        }

        public bool? IsCheckedState()
        {
            if (!HasChild)
                return IsChecked;

            if (TreeItems.All(i => i.IsChecked))
                return true;

            if (TreeItems.All(i => !i.IsChecked))
                return false;

            return null;
        }

        public void CheckedChanged()
        {
            IsChecked = !IsChecked;
            if (HasChild)
            {
                foreach (var child in TreeItems)
                {
                    child.IsChecked = IsChecked;
                }
            }

            if (Parent != null)
            {
                Parent.IsChecked = Parent.TreeItems.All(i => i.IsChecked);
            }

            _isCheckedChangedHandler?.Invoke(IsChecked);
        }
    }

    [Parameter]
    public CameraFilterValues Values { get; set; } = new();

    [Parameter]
    public EventCallback<CameraFilterValues> ValuesChanged { get; set; }

    private HashSet<TreeItemData> _treeItems = new();

    private void ValueSetterAction(bool isChecked, Action valueSetter)
    {
        valueSetter.Invoke();
        ValuesChanged.InvokeAsync(Values);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        var camerasRoot = new TreeItemData("Cameras", Icons.Material.Filled.Videocam, true);

        // Individual toggles for each camera source
        camerasRoot.AddChild("Front", Icons.Material.Filled.Videocam, Values.ShowFront, c => ValueSetterAction(c, () => Values.ShowFront = c));
        camerasRoot.AddChild("Back", Icons.Material.Filled.Videocam, Values.ShowBack, c => ValueSetterAction(c, () => Values.ShowBack = c));

        camerasRoot.AddChild("Left Repeater", Icons.Material.Filled.ChevronLeft, Values.ShowLeftRepeater, c => ValueSetterAction(c, () => Values.ShowLeftRepeater = c));
        camerasRoot.AddChild("Left Pillar", Icons.Material.Filled.VerticalAlignTop, Values.ShowLeftPillar, c => ValueSetterAction(c, () => Values.ShowLeftPillar = c));

        camerasRoot.AddChild("Right Repeater", Icons.Material.Filled.ChevronRight, Values.ShowRightRepeater, c => ValueSetterAction(c, () => Values.ShowRightRepeater = c));
        camerasRoot.AddChild("Right Pillar", Icons.Material.Filled.VerticalAlignTop, Values.ShowRightPillar, c => ValueSetterAction(c, () => Values.ShowRightPillar = c));

        _treeItems.Add(camerasRoot);
    }
}
